Index: src/algorithm/BnB.java
===================================================================
--- src/algorithm/BnB.java	(revision 113)
+++ src/algorithm/BnB.java	(working copy)
@@ -72,6 +72,8 @@
 		int i = next_var_index;
 		int vi = 0;
 
+		updateDAC(i);
+		
 		while (vi < _problem.getD()){
 
 			boolean hasBeenUpdated = false;//TODO:why do we need this again?
@@ -101,7 +103,7 @@
 			}
 			else{
 
-				if (new_dist + dac(i) + _sum_min_ic < _best_dist){
+				if (new_dist + dac(i,v) + _sum_min_ic < _best_dist){
 
 					updateIC(remaining_dom, i, v, 1);
 
@@ -124,7 +126,7 @@
 			if (_best_dist == 0) return;
 		}
 	}
-	
+
 	//TODO: Are we using this here?or should it be downer in the hierechy.
 	protected int getIC(int i, Integer v, Vector<Integer> currSol) {
 
@@ -143,8 +145,12 @@
 	protected void restoreIC(Vector<Vector<Integer>> remainingDom, int i, Integer v) {
 		return;
 	}
+	
+	protected void updateDAC(int i) {
+		return;
+	}
 
-	protected int dac(int i) {
+	protected int dac(int i, int v) {
 		return 0;
 	}
 
Index: src/algorithm/BnBICDAC.java
===================================================================
--- src/algorithm/BnBICDAC.java	(revision 113)
+++ src/algorithm/BnBICDAC.java	(working copy)
@@ -1,9 +1,14 @@
 package algorithm;
 
+import java.util.Vector;
+
 import problem.Problem;
 
 public class BnBICDAC extends BnBIC {
 
+	protected	Vector<Vector<Integer>>	_dac;
+	protected	int						_min_dac;
+
 	public BnBICDAC() {
 		super();
 	}
@@ -14,26 +19,76 @@
 
 	@Override
 	protected void init(Problem problem){
+		
 		super.init(problem);
+		
+		_dac = new Vector<Vector<Integer>>(_problem.getN());
+		
+		Vector<Integer> tmpVec = null;
+		
+		for (int i = 0; i < _problem.getN(); i++){
+			
+			tmpVec = new Vector<Integer>(_problem.getD());
+			
+			for (int j = 0; j < _problem.getN(); j++)
+				tmpVec.add(new Integer(0));
+			
+			_dac.add(tmpVec);
+		}
 	}
 
 	@Override
-	protected int dac(int i){
-
-		int dac = 0;
-
+	protected void updateDAC(int i) {
+		
+		for (int j1 = _problem.getN() - 1; j1 > i; j1--){
+			
+			for (int vj1 = 0; vj1 < _problem.getD(); vj1++){
+				
+				int count = 0;
+				
+				for (int j2 = j1 + 1; j2 < _problem.getN(); j2++){
+					
+					boolean found = false;
+					
+					for (int vj2 = 0; vj2 < _problem.getD() && !found; vj2++){
+						
+						if (_problem.check(j1, vj1, j2, vj2) == 0)
+							found = true;;
+					}
+					
+					if (!found) count++;
+				}
+				
+				_dac.get(j1).set(vj1, new Integer(count));
+			}
+		}
+	}
+	
+	@Override
+	protected void calcSumMinIC(int i) {
+		
+		_sum_min_ic = 0;
+		
 		for (int j = i + 1; j < _problem.getN(); j++){
-
-			boolean found = false;
-
-			for (int k = 0; k < _problem.getD() && !found; k++)
-				if (_ic.get(j).get(k) == 0)
-					found = true;
-
-			if (!found) dac++;
+			
+			int min = _ic.get(j).get(0) + _dac.get(j).get(0);
+			
+			for (int k = 1; k < _problem.getD(); k++){
+	
+				int x = _ic.get(j).get(k) + _dac.get(j).get(k);
+				
+				if (x < min)
+					min = x;
+			}
+			
+			_sum_min_ic += min;
 		}
-
-		return dac;
+	}
+	
+	@Override
+	protected int dac(int i, int v) {
+		// TODO v should be converted to the appropriate Integer??...
+		return _dac.get(i).get(v);
 	}
 
 	@Override
Index: src/algorithm/BnBDAC.java
===================================================================
--- src/algorithm/BnBDAC.java	(revision 113)
+++ src/algorithm/BnBDAC.java	(working copy)
@@ -19,7 +19,23 @@
 	
 	@Override
 	protected void calcSumMinIC(int i) {
-		return;	// in order to keek (_sum_min_ic == 0)
+		
+		_sum_min_ic = 0;
+		
+		for (int j = i + 1; j < _problem.getN(); j++){
+			
+			int min =  + _dac.get(j).get(0);
+			
+			for (int k = 1; k < _problem.getD(); k++){
+	
+				int x = _dac.get(j).get(k);
+				
+				if (x < min)
+					min = x;
+			}
+			
+			_sum_min_ic += min;
+		}
 	}
 	
 	@Override
Index: src/main/Main.java
===================================================================
--- src/main/Main.java	(revision 113)
+++ src/main/Main.java	(working copy)
@@ -48,7 +48,7 @@
 
 	public static void main(String[] args) throws Exception {
 
-		nQueensTests();
+//		nQueensTests();
 		randomMaxCSPProblemsTests("MaxCSP_02.csv", P1_MIN);
 		randomMaxCSPProblemsTests("MaxCSP_05.csv", P1_MIN + P1_DELTA);
 		randomMaxCSPProblemsTests("MaxCSP_08.csv", P1_MAX);
@@ -164,26 +164,26 @@
 
 			debugSB.append("PROBLEM: " + p + "\n");
 
-			if (bnb){
-
-				BnB.solve(p);
-
-				if (!p.isSolved()) debugSB.append("UNSOLVED ");
-				
-				stats.addBnBAssignments(new BigInteger(String.valueOf(p.getAssignments())));
-				stats.addBnBCCs(new BigInteger(String.valueOf(p.getCCs())));
-
-				debugSB.append(p.printSolution() + "\n");
-			}
-
-			BnBIC.solve(p);
-
-			if (!p.isSolved()) debugSB.append("UNSOLVED ");
-			
-			stats.addBnBICAssignments(new BigInteger(String.valueOf(p.getAssignments())));
-			stats.addBnBICCCs(new BigInteger(String.valueOf(p.getCCs())));
-
-			debugSB.append(p.printSolution() + "\n");
+//			if (bnb){
+//
+//				BnB.solve(p);
+//
+//				if (!p.isSolved()) debugSB.append("UNSOLVED ");
+//				
+//				stats.addBnBAssignments(new BigInteger(String.valueOf(p.getAssignments())));
+//				stats.addBnBCCs(new BigInteger(String.valueOf(p.getCCs())));
+//
+//				debugSB.append("BnB:\n" + p.printSolution() + "\n");
+//			}
+//
+//			BnBIC.solve(p);
+//
+//			if (!p.isSolved()) debugSB.append("UNSOLVED ");
+//			
+//			stats.addBnBICAssignments(new BigInteger(String.valueOf(p.getAssignments())));
+//			stats.addBnBICCCs(new BigInteger(String.valueOf(p.getCCs())));
+//
+//			debugSB.append("BnBIC:\n" + p.printSolution() + "\n");
 			
 			BnBDAC.solve(p);
 			
@@ -192,7 +192,7 @@
 			stats.addBnBDACAssignments(new BigInteger(String.valueOf(p.getAssignments())));
 			stats.addBnBDACCCs(new BigInteger(String.valueOf(p.getCCs())));
 
-			debugSB.append(p.printSolution() + "\n");
+			debugSB.append("BnBDAC:\n" + p.printSolution() + "\n");
 
 			BnBICDAC.solve(p);
 			
@@ -201,7 +201,7 @@
 			stats.addBnBICDACAssignments(new BigInteger(String.valueOf(p.getAssignments())));
 			stats.addBnBICDACCCs(new BigInteger(String.valueOf(p.getCCs())));
 
-			debugSB.append(p.printSolution() + "\n");
+			debugSB.append("BnBICDAC:\n" + p.printSolution() + "\n");
 		}
 
 		if (debug) System.out.println(debugSB.toString());
